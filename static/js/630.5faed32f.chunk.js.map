{"version":3,"file":"static/js/630.5faed32f.chunk.js","mappings":"4JAMA,IAJqB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACtB,OAAO,cAAGC,UAAU,QAAb,SAAsBD,GAC9B,C,4ICYKE,GAAmBC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAiE9B,UA/DwB,WAAO,IAAD,IACpBC,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAE9CC,GAAcC,EAAAA,EAAAA,KAAY,SAAAH,GAAK,OAAIA,EAAME,YAAYE,eAAtB,IAC/BC,GAAYF,EAAAA,EAAAA,KAAY,SAAAH,GAAK,OAAIA,EAAME,YAAYG,SAAtB,IAC7BC,GAAQH,EAAAA,EAAAA,KAAY,SAAAH,GAAK,OAAIA,EAAME,YAAYI,KAAtB,IACzBC,GAAWC,EAAAA,EAAAA,MA2BjB,OAtBAC,EAAAA,EAAAA,YAAU,WACR,GAAKf,EAAL,CAEA,IAAMgB,EAAa,mCAAG,oGAGlBH,EAAS,CAAEI,KAAM,2BAA4BC,SAAS,IAHpC,UAIKC,EAAAA,EAAAA,IAAanB,GAJlB,OAIZoB,EAJY,OAMlBP,EAAS,CAAEI,KAAM,6BAA8BC,QAASE,IANtC,gDASlBP,EAAS,CAAEI,KAAM,uBAAwBC,QAAS,KAAMtB,UATtC,yBAYlBiB,EAAS,CAAEI,KAAM,2BAA4BC,SAAS,IAZpC,4EAAH,qDAgBnBF,GAlBmB,CAmBpB,GAAE,CAAChB,EAAQa,KAGV,4BACE,SAAC,KAAD,CAAMQ,GAAIjB,EAAakB,QAAvB,SAAgC,YAE/BX,IAAa,SAAC,IAAD,IACbC,IAAS,SAAC,IAAD,CAAchB,QAASgB,IAChB,OAAhBJ,IACC,4BACE,0BAAI,eAAaA,EAAYe,UAC7B,yBAAG,cAAYf,EAAYgB,YAI/B,0BACE,SAAC,KAAD,CAASH,GAAG,WAAWxB,UAAU,cAAjC,SAA+C,gBAKjD,SAAC,EAAA4B,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAOC,KAAK,WAAWC,SAAS,SAAC9B,EAAD,YAKzC,C,mJC7EY+B,EAAU,mCAAG,sGACDC,EAAAA,EAAAA,IACrB,+CAFsB,uBAChBC,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,qDAOVZ,EAAY,mCAAG,WAAMnB,GAAN,yFACH8B,EAAAA,EAAAA,IAAA,qDACyB9B,IAFtB,uBAClB+B,EADkB,EAClBA,KADkB,kBAInBA,GAJmB,2CAAH,sDAOZC,EAAoB,mCAAG,WAAMhC,GAAN,yFACX8B,EAAAA,EAAAA,IAAA,qDACyB9B,EADzB,cADW,uBAC1B+B,EAD0B,EAC1BA,KAD0B,kBAI3BA,GAJ2B,2CAAH,qD","sources":["components/ErrorMessage.jsx","pages/PostDetailsPage.jsx","services/api.js"],"sourcesContent":["import React from 'react';\n\nconst ErrorMessage = ({ message }) => {\n  return <p className=\"error\">{message}</p>;\n};\n\nexport default ErrorMessage;\n","import React, { Suspense, lazy, useEffect, useRef } from 'react';\nimport {\n  Link,\n  NavLink,\n  Route,\n  Routes,\n  useLocation,\n  useParams,\n} from 'react-router-dom';\n// import PostCommentsPage from './PostCommentsPage';\nimport Loader from 'components/Loader';\nimport ErrorMessage from 'components/ErrorMessage';\n\nimport { findPostById } from 'services/api';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst PostCommentsPage = lazy(() => import('pages/PostCommentsPage'));\n\nconst PostDetailsPage = () => {\n  const { postId } = useParams();\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  const postDetails = useSelector(state => state.postDetails.postDetailsData);\n  const isLoading = useSelector(state => state.postDetails.isLoading);\n  const error = useSelector(state => state.postDetails.error);\n  const dispatch = useDispatch();\n  // const [postDetails, setPostDetails] = useState(null);\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!postId) return;\n\n    const fetchAllPosts = async () => {\n      try {\n        // setIsLoading(true);\n        dispatch({ type: 'postDetails/setIsLoading', payload: true });\n        const postData = await findPostById(postId);\n        // setPostDetails(postData);\n        dispatch({ type: 'postDetails/setPostDetails', payload: postData });\n      } catch (error) {\n        // setError(error.message);\n        dispatch({ type: 'postDetails/setError', payload: error.message });\n      } finally {\n        // setIsLoading(false);\n        dispatch({ type: 'postDetails/setIsLoading', payload: false });\n      }\n    };\n\n    fetchAllPosts();\n  }, [postId, dispatch]);\n\n  return (\n    <div>\n      <Link to={backLinkHref.current}>Go Back</Link>\n\n      {isLoading && <Loader />}\n      {error && <ErrorMessage message={error} />}\n      {postDetails !== null && (\n        <div>\n          <h2>Post Title: {postDetails.title}</h2>\n          <p>Post Body: {postDetails.body}</p>\n        </div>\n      )}\n\n      <div>\n        <NavLink to=\"comments\" className=\"header-link\">\n          Comments\n        </NavLink>\n      </div>\n\n      <Suspense fallback={<Loader />}>\n        <Routes>\n          <Route path=\"comments\" element={<PostCommentsPage />} />\n        </Routes>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default PostDetailsPage;\n","import axios from 'axios';\n\nexport const fetchPosts = async () => {\n  const { data } = await axios.get(\n    'https://jsonplaceholder.typicode.com/posts/'\n  );\n  return data;\n};\n\nexport const findPostById = async postId => {\n  const { data } = await axios.get(\n    `https://jsonplaceholder.typicode.com/posts/${postId}`\n  );\n  return data;\n};\n\nexport const findPostCommentsById = async postId => {\n  const { data } = await axios.get(\n    `https://jsonplaceholder.typicode.com/posts/${postId}/comments`\n  );\n  return data;\n};\n"],"names":["message","className","PostCommentsPage","lazy","postId","useParams","location","useLocation","backLinkHref","useRef","state","from","postDetails","useSelector","postDetailsData","isLoading","error","dispatch","useDispatch","useEffect","fetchAllPosts","type","payload","findPostById","postData","to","current","title","body","Suspense","fallback","path","element","fetchPosts","axios","data","findPostCommentsById"],"sourceRoot":""}